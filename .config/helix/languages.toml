[language-server]
biome = { command = "biome", args = ["lsp-proxy"], except-features = [ "format" ] }
deno = { command = "deno", args = [ "lsp" ], config.deno.enable = true }
emmet-ls = { command = "emmet-ls", args = [ "--stdio" ]}
superhtml-lsp = { command = "superhtml", args = [ "lsp" ]}

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }


[language-server.rust-analyzer.config.check]
command = "clippy"


[language-server.pylsp.config.pylsp]
plugins.pyls_mypy.enabled = true
plugins.pyls_mypy.live_mode = true

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

# Inlay Hints preferences
[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = false
includeInlayFunctionLikeReturnTypeHints = false
includeInlayFunctionParameterTypeHints = false
includeInlayParameterNameHints = "literals" #  'none' | 'literals' | 'all';
includeInlayParameterNameHintsWhenArgumentMatchesName = false
includeInlayPropertyDeclarationTypeHints = false
includeInlayVariableTypeHints = false
includeInlayVariableTypeHintsWhenTypeMatchesName = false

[language-server.typescript-language-server.config.typescirpt.inlayHints]
includeInlayEnumMemberValueHints = false
includeInlayFunctionLikeReturnTypeHints = false
includeInlayFunctionParameterTypeHints = false
includeInlayParameterNameHints = "literals" #  'none' | 'literals' | 'all';
includeInlayParameterNameHintsWhenArgumentMatchesName = false
includeInlayPropertyDeclarationTypeHints = false
includeInlayVariableTypeHints = false
includeInlayVariableTypeHintsWhenTypeMatchesName = false

[[language]]
name = "rust"

[[language]]
name = "cpp"
auto-format = true

[[language]]
name = "c"
auto-format = true

[[language]]
name = "vue"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "vue"] }

[[language]]
name = "toml"
formatter = { command = "dprint", args = ["fmt", "--stdin", "toml"] }
auto-format = true

[[language]]
name = "python"
auto-format = true
# language-servers = ["pyright", "ruff", "pylyzer"]
language-servers = ["pyright", "ruff"]
[language-server.pyright.config.python.analysis]
typeCheckingMode = "basic"
[language-server.ruff]
command = "ruff"
args = ["server"]
[language-server.pylyzer]
command = "pylyzer"
args = ["--server"]

[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }

[[language]]
name = "templ"
auto-format = true
language-servers = ["templ", "tailwindcss-ls", "emmet-ls"]

[[language]]
name = "html"
auto-format = true
language-servers = ["vscode-html-language-server", "superhtml-lsp", "tailwindcss-ls", "emmet-ls"]
formatter = { command = "dprint", args = ["fmt", "--stdin", "html"] }
# formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "css"
auto-format = true
language-servers = ["vscode-css-language-server", "tailwindcss-ls", "emmet-ls"]
formatter = { command = "dprint", args = ["fmt", "--stdin", "css"] }
# formatter = { command = 'prettier', args = ["--parser", "css"] }

[[language]]
name = "svelte"
auto-format = true
formatter = { command = "dprint", args = ["fmt", "--stdin", "svelte"] }
language-servers = ["svelteserver", "tailwindcss-ls"]
comment-tokens = "//"


[[language]]
name = "jsonc"
auto-format = true
formatter = { command = "dprint", args = ["fmt", "--stdin", "json"] }
# language-servers = ["svelteserver", "tailwindcss-ls", "emmet-ls"]

[[language]]
name = "markdown"
auto-format = true
formatter = { command = "dprint", args = ["fmt", "--stdin", "md"] }
language-servers = ["marksman", "markdown-oxide"]

[[language]]
name = "typescript"
language-servers = [ { name = "typescript-language-server", except-features = [ "format" ] }, "biome" ]
# language-servers = ["typescript-language-server", "eslint"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
formatter = { command = "dprint", args = ["fmt", "--stdin", "ts"] }
auto-format = true

[[language]]
name = "javascript"
# language-servers = ["typescript-language-server", "eslint"]
language-servers = [ { name = "typescript-language-server", except-features = [ "format" ] }, "biome" ]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
formatter = { command = "dprint", args = ["fmt", "--stdin", "js"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ { name = "typescript-language-server", except-features = [ "format" ] } ]
# language-servers = ["typescript-language-server", "eslint", "emmet-ls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
formatter = { command = "dprint", args = ["fmt", "--stdin", "jsx"] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [ { name = "typescript-language-server", except-features = [ "format" ] } ]
# language-servers = ["typescript-language-server", "eslint", "emmet-ls"]
# formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
formatter = { command = "dprint", args = ["fmt", "--stdin", "tsx"] }
auto-format = true

[[language]]
name = "json"
# formatter = { command = "prettier", args = [ "--parser", "json" ] }
language-servers = [ { name = "vscode-json-language-server", except-features = [ "format" ] } ]
formatter = { command = "dprint", args = ["fmt", "--stdin", "json"] }
auto-format = true

